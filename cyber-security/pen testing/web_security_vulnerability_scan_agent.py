from crewai.project import CrewBase, agent, crew, task
from langchain_openai import ChatOpenAI, OpenAI
from src.tools import zapproxy
from crewai import Agent, Task, Crew, Process


@CrewBase
class PenTestAgent():
    """Pen TEst crew Agent"""

    agents_config = "src/config/pen_test_agents.yaml"
    tasks_config = "src/config/pen_test_tasks.yaml"

    @agent
    def pen_test_planner(self) -> Agent:
        return Agent(
            config=self.agents_config['pen_tester_planner'],
            tools=[
                zapproxy.zap_general_use
            ],
            verbose=True,
            allow_delegation=False,
        )

    @task
    def cybersecurity_research_task(self) -> Task:
        return Task(
            config=self.tasks_config['web_security_vulnerability_scan'],
            agent=self.pen_test_planner()
        )

    @agent
    def writer_agent_planner(self) -> Agent:
        return Agent(
            config=self.agents_config['writer_agent_planner'],
            verbose=True,
            allow_delegation=False,
        )

    @task
    def cybersecurity_writer_task(self) -> Task:
        return Task(
            config=self.tasks_config['build_cybersecurity_report_task'],
            agent=self.writer_agent_planner()
        )

    @agent
    def markdown_agent_planner(self) -> Agent:
        return Agent(
            config=self.agents_config['markdown_agent_planner'],
            verbose=True,
            allow_delegation=False,
            # llm=OpenAI(model_name="gpt-3.5-turbo", temperature=0.7)
        )

    @task
    def convert_report_to_markdown_task(self) -> Task:
        return Task(
            config=self.tasks_config['convert_report_to_markdown_task'],
            agent=self.markdown_agent_planner()
        )

    @crew
    def crew(self) -> Crew:
        return Crew(
            agents=self.agents,  # Automatically created by the @agent decorator
            tasks=self.tasks,  # Automatically created by the @task decorator
            process=Process.sequential,
            verbose=True,
            memory=True,
        )


if __name__ == "__main__":
    result = PenTestAgent().crew().kickoff()
    print(result)